//Ref: https://www.frontendinterviewhandbook.com/javascript-questions#explain-event-delegation
const eventDelegation = (event) => {
  console.log(event.target.innerHTML);
  const el = document.getElementById("clickedEl");
  el.innerHTML = `clicked: ${event.target.innerHTML}`;
  console.log("event delegation");
};

// class thisFn {
//   constructor() {
//     console.log(this);
//     this.value = 10;
//     console.log(this);
//   }
// }

//https://www.frontendinterviewhandbook.com/javascript-questions#explain-how-this-works-in-javascript

//rule 1
//if function call as constructor this is the current object
function thisFn() {
  console.log(this);
  this.value = 12;
  console.log(this);
}

const thisFnObj = new thisFn();

// rule 2
//if used as a argument in call apply nd bind , this is the passed object

//don't use Arrow function this will not work

//call
function car(make, color) {
  console.log(`${make}'s ${color} car looks ${this.expression}`);
}

car.call({ expression: "awesome" }, "honda", "white");

//apply
function car(make, color) {
  console.log(`${make}'s ${color} car looks ${this.expression}`);
}

car.apply({ expression: "fantastic" }, ["wolksvogan", "red"]); // in array

//bind

function car(make, color) {
  console.log(`${make}'s ${color} car looks ${this.expression}`);
}

const bindFn = car.bind({ expression: "superrr" }, "toyota", "pink");

bindFn();

//https://www.frontendinterviewhandbook.com/javascript-questions#can-you-give-an-example-of-one-of-the-ways-that-working-with-this-has-changed-in-es6

//parent
function Animal(name) {
  this.name = name;
}

//child
function Dog(name) {
  Animal.call(this, name);
}

Animal.prototype.makeSound = function () {
  console.log("this " + this.constructor.name + " makes a sound");
};

Dog.prototype.bark = function () {
  console.log("Woof");
};

Object.setPrototypeOf(Dog.prototype, Animal.prototype);

const bolt = new Dog("bolt");
bolt.makeSound();
bolt.bark();

//IIFE

(IIFE = () => {
  console.log("this is from IIEF");
})();

// unDecl = 1;
//Closure
// for data privacy --------

const outerFunction = (outerParam) => {
  return (innerParam) => {
    return `outerParam: ${outerParam}, innerParam: ${innerParam}`;
  };
};

const cloFn = outerFunction("hari");
console.log(cloFn("ravi"));
console.log(cloFn("waste"));
console.log(cloFn("fucker"));

//host objects are generated by node or windows eg: window object, document etc

//Diff btw
function Person() {}
-"funtion with capital P is considered as constructor";
var person = Person() - "function call";
var person = new Person() - "initiation";

//call - C with Comma separated
//Apply - A array separated

//Ajax - Asynchronous javascript and xml
//JavaScript templating - JSX
//hoisting
// behavior of variable declarations
// only the declaration is hoisted

//here the js engine declares as
//var foo;
//and then follows so
console.log(foo); // undefined
var foo = "funda"; // initialized
console.log(foo); // outputs 'funda'

//for function ,the function is body hosted
host(); //--this works
function host() {
  console.log("hii its hosted");
}

//let or const the variable is hosted but its in TDZ - temporal dead zone

// console.log(dash); // gets undefined
let dash = 30;
console.log(dash);

//var -  hosted and initilized to undefined
//let or const  - hosted and stays in TDZ until the line executes
//event bubbling and capturing

//window.load - call all the DOM and assets and css are loaded
//DOMcontentload - start on initil DOM, not all.
//https://www.frontendinterviewhandbook.com/javascript-questions#create-a-for-loop-that-iterates-up-to-100-while-outputting-fizz-at-multiples-of-3-buzz-at-multiples-of-5-and-fizzbuzz-at-multiples-of-3-and-5
// for (let i = 0; i <= 100; i++) {
//   if (i % 3 === 0) {
//     console.log("fizz", i);
//   } else if (i % 5 === 0) {
//     console.log("fizzBuzz", i);
//   }
// }

//promises and callbacks

//callback

const cbFn = (callback) => {
  setTimeout(() => {
    callback("callback is kicked");
  }, 1000);
};

cbFn((data) => {
  console.log("data", data);
});

// promise

const promiseFn = () => {
  const pro = new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve("time out from promise");
    }, 1000);
  });

  return pro;
};

promiseFn().then((data) => console.log(data));
